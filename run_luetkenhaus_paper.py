from quantum_objects import Source
from events import SourceEvent


class SchedulingSource(Source):
    """A Source that schedules its next event according to a distribution.

    Parameters
    ----------
    see Source

    time_distribution : callable
        Used for scheduling. Should return the amount of time until the next
        SourceEvent should take place (possible probabilistic).
    state_generation : callable
        Should return (possibly probabilistically) the density matrix of the
        pair generated by the source.

    """
    def __init__(self, world, position, target_stations, time_distribution, state_generation):
        self.time_distribution = time_distribution
        self.state_generation = state_generation
        super(SchedulingSource, self).__init__(world, position, target_stations)

    def schedule_event(self):
        time_delay = self.time_distribution()
        scheduled_time = self.event_queue.current_time + time_delay
        initial_state = self.state_generation()  # should accurately describe state at the scheduled time
        source_event = SourceEvent(time=scheduled_time, source=self, initial_state=initial_state)
        self.event_queue.add_event(source_event)
